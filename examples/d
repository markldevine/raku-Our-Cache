#!/usr/bin/env raku

my IO::Path $cache-dir .= new: '/home/mdevine/.rakucache/ispssrules.raku';

my Int $full-expiration-scan-interval = (24 * 60 * 60);

sub purge-all-expired-data () {
    if "$cache-dir/.last-full-expiration-scan".IO.e {
        return if "$cache-dir/.last-full-expiration-scan".IO.modified > (now - $full-expiration-scan-interval);
    }
    my @expired-directories = process_dir($cache-dir);
    my $dir-sep = $cache-dir.IO.SPEC.dir-sep;
    for @expired-directories -> $dir {
        put "unlink($dir/expire-datetime)";
        put "unlink($dir/data)";
        put "unlink($dir/collection-datetime)";
        put "$dir.rmdir";
        my @sub-dirs = $dir.subst($cache-dir ~ $dir-sep).split($dir-sep);
        loop (my $i = @sub-dirs.elems - 2; $i >= 0; $i--) {
            my $path = IO::Path.new($cache-dir ~ $dir-sep ~ @sub-dirs[0..$i].join($dir-sep));
            last if $path.dir-with-entries;
            put $path ~ '.rmdir';
        }
    }
    spurt("$cache-dir/.last-full-expiration-scan");
}

sub process_dir (IO::Path:D $dir) {
    my @expired-directories;
    for $dir.dir -> $dir-ent {
        if $dir-ent.d {
            @expired-directories.append: process_dir($dir-ent);
        }
        elsif $dir-ent.f {
            if $dir-ent.Str.ends-with('expire-datetime') {
                if DateTime.new(slurp($dir-ent)) < now {
                    @expired-directories.push: $dir-ent.dirname;
                };
            }
        }
    }
    return @expired-directories;
}

purge-all-expired-data;
